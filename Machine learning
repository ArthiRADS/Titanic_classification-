import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
titanic_data=pd.read_csv('/content/train (1).csv')
titanic_data.head()

titanic_data.shape
titanic_data.info()
titanic_data.isnull().sum()
titanic_data=titanic_data.drop(columns='Cabin',axis=1)
print(titanic_data['Embarked'].mode()[0])
titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0],inplace=True)
titanic_data.isnull().sum()
#getting some statistical measures about the data
titanic_data.describe()

#finding the number of people survived and not survived
titanic_data['Survived'].value_counts()

import seaborn as sns
import matplotlib.pyplot as plt

# Assuming 'Survived' is a column in your DataFrame and 'titanic_data' is your DataFram
sns.countplot(x='Survived', data=titanic_data)

# Adding labels for better visualization
plt.xlabel('Survived')
plt.ylabel('Count')
plt.title('Survival Count')
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
sns.countplot(x='Sex',data=titanic_data)

titanic_data['Sex'].value_counts()

# number of survivors Gender wise
import seaborn as sns
import matplotlib.pyplot as plt
sns.countplot(x='Sex',hue='Survived',data=titanic_data)

import seaborn as sns
import matplotlib.pyplot as plt
sns.countplot(x='Pclass',data=titanic_data)

import seaborn as sns
import matplotlib.pyplot as plt
sns.countplot(x='Pclass',hue='Survived',data=titanic_data)
titanic_data['Sex'].value_counts()

titanic_data.replace({'Sex': {'male': 0, 'female': 1}, 'Embarked': {'S': 0, 'C': 1, 'Q': 2}}, inplace=True)
titanic_data.head()

x=titanic_data.drop(columns=['PassengerId','Name','Ticket','Survived'],axis=1)
y=titanic_data['Survived']
print(x)
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=2)
print(x.shape,x_train.shape, x_test.shape)

model=LogisticRegression()
model.fit(x_train,y_train)

x_train_prediction = model.predict(x_train)
print(x_train_prediction)
 training_data_accuracy=accuracy_score( y_train,x_train_prediction)
  print('Accuracy score of training data: ',training_data_accuracy)
